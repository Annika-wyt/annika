<?xml version="1.0"?>
<!--
    Launch default odometry and localization
-->

<launch>
    <!-- Launch file arguments -->

    <!-- Main argument -->
    <arg name="is_sim"                  default="false"/>
    <arg name="is_indoors"              default="true" />
    <arg name="initial_pose_x"          default="0.0" />
    <arg name="initial_pose_y"          default="0.0" />
    <arg name="initial_pose_a"          default="0.0" />

    <!-- low-level interface (serial) -->
    <arg name="start_serial"            default="false" /> 
    <!-- Should be set to true, if only the localization is running 
    (i.e. this is needed in order to have wheel encoders and actuation_to_twist working) -->
    <arg name="lli_port"                default="/dev/ttyACM0"/>

    <!-- map server -->
    <arg name="map_file"                default=""/>

    <!-- Lidar  -->
    <arg name="lidar_ip"                default="192.168.3.11" />

    <!-- Wheel encoder -->
    <arg name="start_wheel_encoders"    default="false" />

    <!-- GPS -->
    <arg name="start_rtk"                 default="false"/>
    <arg name="gps_device"              default="/dev/ttyACM0" />
    <arg name="delay"                   default="2.0"/>
    <!-- yaw offest = initial_pose_a -->

    <!-- odom to map node -->
    <arg name="map_frame"               default="map"/>
    <arg name="wait_for_transform"      default="false"/>
    <arg name="publish_odometry"        default="true"/>
    <arg name="publish_pose"            default="true"/>

    <!-- camera for detection -->
    <arg name="camera_device_id"        default="1"/>
    <arg name="camera_info_file"        default="e_con_camera_4k.yaml"/>

    <!-- Aruco -->
    <arg name="camera_image_topic"      default="/camera/image_raw"/>
    <arg name="camera_info_topic"       default="/camera/camera_info"/>
    <arg name="aruco_size"              default="0.1"/>

    <!-- Nodes -->
    <!-- Start low-level interface -->
    <group if="$(arg start_serial)">
        <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
            <param name="port" value="$(arg lli_port)"/>
            <param name="baud" value="250000"/>
        </node>
    </group>

    <!-- Start map server -->
    <node if="$(eval map != '')" pkg="map_server" type="map_server" name="map_server" output="screen" args="$(arg map_file)"/>

    <!-- start all sensors if this is not a simulation -->
    <group unless="$(arg is_sim)">
        <param name="use_sim_time" value="false"/>
        <group if="$(arg is_indoors)">
            <!-- Start the Real Sense camera -->
            <include file="$(find svea_sensors)/launch/sensors_launch/real_sense_camera.launch"></include>

            <!-- Start Lidar -->
            <include file="$(find svea_sensors)/launch/sensors_launch/lidar.launch">
                <arg name="lidar_ip"                    value="$(arg lidar_ip)" />
            </include>

            <!-- Start AMCL -->
            <node pkg="amcl" type="amcl" name="amcl_localization" output="screen">
                <rosparam command="load"        file="$(find svea_sensors)/params/amcl/localize.yaml"/>
                <param name="scan"              value="scan"/>
                <param name="initial_pose_x"    value="$(arg initial_pose_x)" />
                <param name="initial_pose_y"    value="$(arg initial_pose_y)" />
                <param name="initial_pose_a"    value="$(arg initial_pose_a)" />
            </node>
        </group>

        <!-- Start GPS if outdoor localization -->
        <group unless="$(arg is_indoors)">
            <group if="$(arg start_rtk)">
                <include file="$(find svea_sensors)/launch/sensors_launch/rtk.launch">
                    <arg name="gps_device"      value="$(arg gps_device)" />
                </include>
            </group>
            <include file="$(find svea_sensors)/launch/sensors_launch/navsat.launch">
                <arg name="delay"           value="$(arg delay)"/>
                <arg name="yaw_offset"      value="$(arg initial_pose_a)"/>
            </include>
        </group>

        <!-- Start IMU -->
        <!-- <include file="$(find svea_sensors)/launch/sensors_launch/imu.launch"></include> -->

        <!-- Start controller -->
        <include file="$(find svea_sensors)/launch/sensors_launch/controller.launch"></include>

        <!-- Start wheel encoder -->
        <include if="$(arg start_wheel_encoders)" file="$(find svea_sensors)/launch/sensors_launch/wheel_encoder.launch"></include>

        <!-- Static transforms for sensors -->
        <node pkg="tf2_ros" type="static_transform_publisher" name="odommap_broadcaster"    args="0 0 0 0 0 0 map odom" />   
        <node pkg="tf2_ros" type="static_transform_publisher" name="linkodom_broadcaster"    args="0 0 0 0 0 0 odom base_link" />   
        <node pkg="tf2_ros" type="static_transform_publisher" name="imulink_broadcaster"    args="0 0 0.1 0 0 0 base_link imu" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="gpslink_broadcaster"    args="-0.058 -0.015  0.115 0 0 0 base_link gps" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="cameralink_broadcaster"    args="0.383 0.0 0.250 -1.57 0 -1.57 base_link camera" />  <!-- for e-com-4k -->
        <node pkg="tf2_ros" type="static_transform_publisher" name="maparuco_broadcaster"  args="0 0 0 0 0 0 map aruco0_actual" />

        <group if="$(arg is_indoors)">
            <node pkg="tf2_ros" type="static_transform_publisher" name="lidarlink_broadcaster"  args="0.284 0 0.2 0 0 0 1 base_link laser" />
            <node pkg="tf2_ros" type="static_transform_publisher" name="t265_link_broadcaster"  args="0.09 0 0.215 0 -1.57 3.14 base_link t265_camera_pose_frame" />
            <node pkg="tf2_ros" type="static_transform_publisher" name="t265_odom_broadcaster"  args="0.09 0 0.215 0 -1.57 3.14 odom t265_camera_odom_frame" />
        </group>

        <!-- Start camera -->
        <include file="$(find svea_sensors)/launch/sensors_launch/camera.launch">
            <arg name="camera_device_id"        value="$(arg camera_device_id)"/>
            <arg name="camera_info_file"        value="$(arg camera_info_file)"/>
        </include>

        <!-- Start ArUco Detection-->
        <include file="$(find svea_sensors)/launch/sensors_launch/aruco_marker_detection.launch">
            <arg name="camera_image_topic"      value="$(arg camera_image_topic)"/>
            <arg name="camera_info_topic"       value="$(arg camera_info_topic)"/>
            <arg name="aruco_size"              value="$(arg aruco_size)"/>
        </include>

        <!-- Start ArUco Positioning-->
        <node name="aruco_pose" pkg="svea_sensors" type="aruco_pose.py" output="screen"/>
            
    </group>

    <node pkg="svea_sensors" type="odom_to_map" name="odom_to_map" output="screen">
        <param name="map_frame"             value="$(arg map_frame)"/>
        <param name="wait_for_transform"    value="$(arg wait_for_transform)"/>
        <param name="publish_odometry"      value="$(arg publish_odometry)"/>   
        <param name="publish_pose"          value="$(arg publish_pose)"/>
    </node>
    
    <!-- <node name="perspective_3_point" pkg="svea_sensors" type="perspective_3_point.py" output="screen"/> -->
    
</launch>